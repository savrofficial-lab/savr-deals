// api/coins.js
// Vercel serverless function (CommonJS)
// This function optionally reads from Supabase REST if you set SUPABASE_URL & SUPABASE_KEY env vars.
// If not configured it returns a helpful message with SQL to run.

module.exports = async (req, res) => {
  try {
    const SUPABASE_URL = process.env.SUPABASE_URL;
    const SUPABASE_KEY = process.env.SUPABASE_KEY; // anon or service role (be careful)
    const userId = req.query.user_id;

    if (!SUPABASE_URL || !SUPABASE_KEY) {
      return res.status(501).json({
        error: "BACKEND_NOT_CONFIGURED",
        message: "No SUPABASE_URL / SUPABASE_KEY env vars found. Set them in Vercel or create a coins endpoint.",
        quick_sql: `-- Example SQL to create minimal tables in Supabase
CREATE TABLE users (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text,
  email text,
  coins_balance numeric DEFAULT 0,
  coins_pending numeric DEFAULT 0
);

CREATE TABLE coins_ledger (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id bigint REFERENCES users(id),
  type text,            -- 'CREDIT' or 'DEBIT'
  amount numeric,
  status text,          -- 'PENDING' | 'AVAILABLE' | 'REDEEMED' | 'CANCELLED'
  description text,
  order_id bigint,
  created_at timestamptz DEFAULT now(),
  confirmed_at timestamptz
);
`,
        note: "After creating tables, set SUPABASE_URL and SUPABASE_KEY in Vercel and call /api/coins?user_id=1"
      });
    }

    if (!userId) {
      return res.status(400).json({ error: "missing_user_id", message: "Please call /api/coins?user_id=<your_user_id>" });
    }

    // Build headers for Supabase REST (no client library needed)
    const headers = {
      apikey: SUPABASE_KEY,
      Authorization: `Bearer ${SUPABASE_KEY}`,
      "Content-Type": "application/json"
    };

    // Fetch user summary (coins_balance & coins_pending)
    const userResp = await fetch(`${SUPABASE_URL}/rest/v1/users?id=eq.${encodeURIComponent(userId)}&select=id,coins_balance,coins_pending`, { headers });
    if (!userResp.ok) {
      const t = await userResp.text();
      return res.status(502).json({ error: "supabase_user_fetch_failed", status: userResp.status, text: t });
    }
    const users = await userResp.json();
    const user = users[0] || { coins_balance: 0, coins_pending: 0 };

    // Fetch ledger rows
    const ledgerResp = await fetch(`${SUPABASE_URL}/rest/v1/coins_ledger?user_id=eq.${encodeURIComponent(userId)}&order=created_at.desc`, { headers });
    let ledger = [];
    if (ledgerResp.ok) {
      ledger = await ledgerResp.json();
    }

    return res.status(200).json({
      available: Number(user.coins_balance || 0),
      pending: Number(user.coins_pending || 0),
      ledger
    });
  } catch (err) {
    console.error("api/coins error:", err);
    return res.status(500).json({ error: "internal_error", message: String(err) });
  }
};
